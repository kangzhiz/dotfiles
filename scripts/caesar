#!/usr/bin/env python3


import sys
import string
from collections import Counter

alphabet = list(string.ascii_uppercase)

# frequency of letters across English texts
p = [
    0.080,  # a
    0.015,  # b
    0.030,  # c
    0.040,  # d
    0.130,  # e
    0.020,  # f
    0.015,  # g
    0.060,  # h
    0.065,  # i
    0.005,  # j
    0.005,  # k
    0.035,  # l
    0.030,  # m
    0.070,  # n
    0.080,  # o
    0.020,  # p
    0.002,  # q
    0.065,  # r
    0.060,  # s
    0.090,  # t
    0.030,  # u
    0.010,  # v
    0.015,  # w
    0.005,  # x
    0.020,  # y
    0.002,  # z
]

# check for input string
if len(sys.argv) < 2:
    sys.exit("ERROR: No string provided")

# get input
user_input = sys.argv[1].lower()

# clean and sort input string
sorted_string = sorted(user_input.lower().replace(" ", ""))

# find frequency of letters within input string
frequency = Counter(sorted_string)

# get list of unique characters in input string
unique_characters = list(dict.fromkeys(sorted_string))

# calculate correlations
phi = []
for i in range(0, 26):
    phi_val = 0
    for letter in unique_characters:
        fraction = frequency[letter] / len(sorted_string)
        phi_val += fraction * p[ord(letter) - 97 - i]
    phi.append(round(phi_val, 4))

# sort phi values to find maximum
phi_sorted = sorted(phi, reverse=True)

# display results
print("Possible solutions, ordered by phi correlation value:")
for i in phi_sorted:
    i_val = phi.index(i)

    # calculate new strings
    new_string = ""
    for letter in user_input:
        # ignore spaces
        if letter == " ":
            new_string += letter
        else:
            new_string += alphabet[ord(letter) - 97 - i_val]
    print(new_string)
